---

- name: '[Pretask] Prepare'
  hosts: all
  gather_facts: False
  tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      become: True
      changed_when: False

- name: '[Pretask] Install pip'
  hosts: all
  tasks:
    - name: Install required packages
      become: true
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - python-pip
        - python-mysqldb

# From: https://git.digitales.cslabrecha.org/ansible-roles/docker
- name: '[Pretask] Install docker'
  hosts: all
  roles:
    - role: docker

- name: '[Pretask] Deploy web related services'
  hosts: all
  become: true
  gather_facts: false
  vars:
    domain: "{{ base_domain }}"
    letsencrypt_renew_hook: /usr/sbin/service nginx reload
    letsencrypt_method: standalone
  pre_tasks:
    - name: Gather tasks
      setup:
        filter: ansible_*

    - name: Add group name ssl-cert for SSL certificates
      group:
        name: ssl-cert
        state: present

    - name: Install certbot package
      package:
        name: certbot
        state: present
      retries: 3
      delay: 3
      register: install_certbot
      until: install_certbot is succeeded
      tags: letsencrypt

    - name: Create live directory for Let's Encrypt
      file:
        state: directory
        path: "/etc/letsencrypt/live"
        group: ssl-cert
        owner: root
      tags: letsencrypt

    - name: Create web directory
      file:
        path: "{{ web_path_letsencrypt }}"
        state: directory
        owner: www-data
        group: www-data
        mode: "u=rwx,g=r,o="
  roles:
    - role: letsencrypt-request
    - role: anarres-nginx

## OpenLDAP

- name: "[Pretask] Get openldap subdomain Let's Encrypt certificate"
  hosts: all
  become: true
  gather_facts: false
  vars:
    openldap_domain: anarres.local
    domain: "{{ openldap_domain }}"
    letsencrypt_renew_hook: /usr/sbin/service docker.openldap restart
  roles:
    - role: letsencrypt-request
      tags: letsecrypt_request
  tags: openldap

- name: '[Pretask] Deploy openldap in docker'
  hosts: all
  become: true
  gather_facts: false
  vars:
    openldap_domain: anarres.local
    create_volume: false
    enable_db: false
    create_network: true
    service_name: openldap
    docker_image: "{{ openldap_docker_image }}"
    container_certs_path: /container/service/slapd/assets/certs
    docker_command: |
      /usr/bin/docker run --rm --name "{{ service_name }}" \
      -v {{ openldap_directory.data }}:/var/lib/ldap \
      -v {{ openldap_directory.conf }}:/etc/ldap/slapd.d \
      -v /etc/letsencrypt/live/{{ openldap_domain }}:{{ container_certs_path }}/live/{{ openldap_domain }}/:ro \
      -v /etc/letsencrypt/archive/{{ openldap_domain }}:{{ container_certs_path }}/archive/{{ openldap_domain }}/:ro \
      -p {{ openldap_port_secure }}:636 \
      -e LDAP_ORGANISATION="{{ openldap_domain }}" \
      -e LDAP_DOMAIN="{{ openldap_domain }}" \
      -e LDAP_ADMIN_PASSWORD="{{ openldap_admin_password }}" \
      -e LDAP_BASE_DN="{{ openldap_base_DN }}" \
      -e LDAP_READONLY_USER=true \
      -e LDAP_READONLY_USER_USERNAME=readonly \
      -e LDAP_READONLY_USER_PASSWORD="{{ openldap_readonly_password }}" \
      -e LDAP_TLS="true" \
      -e LDAP_TLS_VERIFY_CLIENT="try" \
      -e LDAP_TLS_CRT_FILENAME="live/{{ openldap_domain }}/cert.pem" \
      -e LDAP_TLS_KEY_FILENAME="live/{{ openldap_domain }}/privkey.pem" \
      -e LDAP_TLS_CA_CRT_FILENAME="live/{{ openldap_domain }}/fullchain.pem" \
      -e LDAP_NOFILE=1024 \
      --network {{ service_name }} \
      {{ docker_image }} --copy-service
  pre_tasks:
    - name: Create openldap directories
      file:
        path: "{{ item.value }}"
        state: directory
        mode: 0700
      with_dict: "{{ openldap_directory }}"
  post_tasks:
    - name: Install requiered python LDAP module
      package:
        name: python-ldap
        state: present
      tags: dependencies

    - name: Wait for configuration database container to start
      wait_for:
        port: "{{ openldap_port_secure }}"

    - name: Add groups organizational unit
      ldap_entry:
        dn: "ou=groups,{{ openldap_base_DN }}"
        objectClass: organizationalUnit
        server_uri: "{{ openldap_server_uri }}"
        start_tls: false
        validate_certs: "{{ testing is undefined and openldap_validate_certs }}"
        bind_dn: "cn=admin,{{ openldap_base_DN }}"
        bind_pw: "{{ openldap_admin_password }}"
      tags:
        - ldap-setup

    - name: Add users organizational unit
      ldap_entry:
        dn: "ou=users,{{ openldap_base_DN }}"
        objectClass: organizationalUnit
        server_uri: "{{ openldap_server_uri }}"
        start_tls: false
        validate_certs: "{{ testing is undefined and openldap_validate_certs }}"
        bind_dn: "cn=admin,{{ openldap_base_DN }}"
        bind_pw: "{{ openldap_admin_password }}"
      tags:
        - ldap-setup

    - name: Add users group
      ldap_entry:
        dn: "cn=users,ou=groups,{{ openldap_base_DN }}"
        objectClass: posixGroup
        attributes:
          gidNumber: 2000
        server_uri: "{{ openldap_server_uri }}"
        start_tls: false
        validate_certs: "{{ testing is undefined and openldap_validate_certs }}"
        bind_dn: "cn=admin,{{ openldap_base_DN }}"
        bind_pw: "{{ openldap_admin_password }}"
      tags:
        - ldap-setup
  roles:
    - role: generic_docker_systemd
  tags: openldap

## phpLDAPadmin

- name: '[Pretask] Deploy phpldapadmin in docker'
  hosts: all
  become: true
  gather_facts: false
  vars:
    create_volume: false
    enable_db: false
    service_name: phpldapadmin
    docker_image: "{{ phpldapadmin_docker_image }}"
    docker_command: |
      /usr/bin/docker run --rm --name "{{ service_name }}" \
      -p {{ phpldapadmin_internal_web_port }}:80 \
      -e  PHPLDAPADMIN_LDAP_HOSTS="{{ phpldapadmin_ldap_hosts }}" \
      -e PHPLDAPADMIN_HTTPS="false" \
      -e PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT="allow" \
      --network openldap \
      {{ docker_image }}
  roles:
    - role: generic_docker_systemd
  tags: phpldapadmin

- name: "[Pretask] Get phpldapadmin subdomain Let's Encrypt certificate"
  hosts: all
  become: true
  gather_facts: false
  vars:
    domain: "{{ phpldapadmin_domain }}"
    letsencrypt_renew_hook: /usr/sbin/service nginx reload
  roles:
    - role: letsencrypt-request
      tags: letsecrypt_request
  tags: phpldapadmin

- name: '[Pretask] Configure nginx proxy for phpldapadmin'
  hosts: all
  become: true
  gather_facts: false
  vars:
    domain: "{{ phpldapadmin_domain }}"
    binded_port: "{{ phpldapadmin_internal_web_port }}"
  roles:
    - role: add_nginx_proxy_conf
      tags: proxy
  tags: phpldapadmin
